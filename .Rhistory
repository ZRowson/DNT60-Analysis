# Legend for cell signal arrows.
dir_lgd = Legend(labels = c(paste("\U2191","Gain"),
paste("\U2193","Loss"),
paste("\U21C5","GainLoss"),
paste("\U21F5","LossGain")),
title = "Signal Direction",
labels_gp = gpar(fontsize=12),
title_gp = gpar(fontsize=12),
title_position = "leftcenter",
nrow = 1,
column_gap = unit(0, 'mm')) # Will produce warnings, don't worry.
lgd_list <- list(ann_lgd, dir_lgd)
# Create column annotation indicating the phase of the LMR that is described.
column_ha <- ComplexHeatmap::HeatmapAnnotation(Phase = factor(c(rep("Light",4), rep("Transition",3),rep("Dark",4),rep("Light+Dark",2)),
levels=c("Light","Transition","Dark","Light+Dark")),
border = TRUE,
col = list(Phase=c("Light"="white",
"Transition"="grey",
"Dark"="black",
"Light+Dark"="red")),
annotation_legend_param = list(nrow = 1),
show_annotation_name = FALSE,
show_legend = FALSE)
# Create function to add arrows indicating signal direction in cells.
cell_fun <- function(j, i, x, y, width, height, fill) {
if (layer.mat[i,j] == 0) {
grid.text("\U21C5", x, y)
} else if (layer.mat[i,j] == 1) {
grid.text("\U21F5", x, y)
} else if (layer.mat[i,j] == 2) {
grid.text("\U2191", x, y)
} else if (layer.mat[i,j] == 3) {
grid.text("\U2193", x, y)
}
}
# Create main heat map.
htlist <- ComplexHeatmap::Heatmap(bmd[actives,],
# Specify some parameters for heat legend.
name = paste0("BMC log(","\U03BC","M)"),
col = f2,
border_gp = grid::gpar(col="black",lwd=1),
rect_gp=grid::gpar(col="grey"),
show_heatmap_legend = TRUE,
heatmap_legend_param = list(legend_height = unit(6,"cm"),
direction = "vertical",
title_gp = grid::gpar(fontsize=14),
labels_gp = grid::gpar(fontsize = 14)),
# Heatmap width and height
# width = unit(16,"in"),
# height = unit(18,"in"),
# Column label parameters
column_labels = col_labels, column_names_rot = 45,
# Split columns by phase.
column_split = factor(c(rep("Light",4), rep("Transition",3),rep("Dark",4),rep("Light+Dark",2)),
levels=c("Light","Transition","Dark","Light+Dark")),
# Specify some column parameters.
column_title = NULL,
top_annotation = column_ha,
# Add signal direction arrows.
cell_fun = cell_fun,
# Specify some parameters row dendrogram aesthetics and row labels.
row_title_side = "right",
row_title_rot = 0,
row_split = 5,
row_dend_side = "right",
row_names_side = "left",
# Clustering parameters.
cluster_columns = FALSE,
cluster_rows = TRUE,
clustering_distance_rows = "pearson",
# Font sizes
row_names_gp = grid::gpar(fontsize=14),
column_names_gp = grid::gpar(fontsize=14),
row_title_gp = grid::gpar(fontsize=14),
column_title_gp = grid::gpar(fontsize=14)
)
# Create main heat map.
htlist <- ComplexHeatmap::Heatmap(bmd[rownames(bmd)%in%actives, ],
# Specify some parameters for heat legend.
name = paste0("BMC log(","\U03BC","M)"),
col = f2,
border_gp = grid::gpar(col="black",lwd=1),
rect_gp=grid::gpar(col="grey"),
show_heatmap_legend = TRUE,
heatmap_legend_param = list(legend_height = unit(6,"cm"),
direction = "vertical",
title_gp = grid::gpar(fontsize=14),
labels_gp = grid::gpar(fontsize = 14)),
# Heatmap width and height
# width = unit(16,"in"),
# height = unit(18,"in"),
# Column label parameters
column_labels = col_labels, column_names_rot = 45,
# Split columns by phase.
column_split = factor(c(rep("Light",4), rep("Transition",3),rep("Dark",4),rep("Light+Dark",2)),
levels=c("Light","Transition","Dark","Light+Dark")),
# Specify some column parameters.
column_title = NULL,
top_annotation = column_ha,
# Add signal direction arrows.
cell_fun = cell_fun,
# Specify some parameters row dendrogram aesthetics and row labels.
row_title_side = "right",
row_title_rot = 0,
row_split = 5,
row_dend_side = "right",
row_names_side = "left",
# Clustering parameters.
cluster_columns = FALSE,
cluster_rows = TRUE,
clustering_distance_rows = "pearson",
# Font sizes
row_names_gp = grid::gpar(fontsize=14),
column_names_gp = grid::gpar(fontsize=14),
row_title_gp = grid::gpar(fontsize=14),
column_title_gp = grid::gpar(fontsize=14)
)
# Save heatmap file.
png(filename = "BMC try.png", width = 22, height = 26, unit = "cm", res=300)
draw(htlist, merge_legend = FALSE, annotation_legend_list = lgd_list,
annotation_legend_side = "top", align_annotation_legend = "heatmap_center")
dev.off()
View(tcplfits_n)
data <- lapply(tcplfits_n, function(chm) {
x <- lapply(chm, function(endp) {
summary <- endp[["summary"]]
summary[,!names(summary)%in%c("conc","resp")]})
do.call('rbind', x)
})
DNT60_tcpl_out <- do.call('rbind', data)
save(DNT60_tcpl_out, file = "results/Padilla_DNT60_tcpl_out.Rdata")
setwd("results/concResp graphics")
# loop through chemicals printing tcplfit2 plots
chms <- names(tcplfits_n)
lapply(chms, function (chm) {
dir.create(chm)
setwd(chm)
to_fit <- tcplfits_n[[chm]]
lapply(to_fit, function(row) {
summary <- row[["summary"]]
png(paste0(paste("concResp", summary$name, summary$assay, sep= "_"),
".png"),
width = 720,
height = 720)
print(row[["plot"]])
dev.off()
})
setwd("..")
})
## ---------------------------
##
## Script Name: DNT60 Analysis heatmaps
##
## Purpose of Script: Summarize results of OP analysis in heatmap graphics.
##
## Author: Zachary Rowson
##
## Date Created: 2022-03-01
##
## Email: Rowson.Zachary@epa.gov
##
## Working Directory: "/ccte/home2/zrowson/Desktop/Stephanie Projects/DNT60 Analysis/pipelining/results/concResp graphics"
##
## ---------------------------
##
## Notes:
##
##
## ---------------------------
library(data.table)
library(ComplexHeatmap)
library(gridExtra)
library(viridis)
library(grid)
here::i_am("R/heatmaps.R")
# load data and extract BMC's ---------------------------------------------
# Load tcplfits
library(here)
load("../pipelining/pipelined data/Padilla_DNT60_tcplfits.rda")
ac <- c("AUC_L","avgS_L", "hbt1_L", "hbt2_L","RoA_L",
"strtlA","strtlAavg", "strtlF",
"AUC_D", "avgS_D","hbt1_D", "hbt2_D", "RoA_D",
"AUC_T","avgS_T","AUC_r")
## Gather BMC's
bmd <- lapply(tcplfits_n, function(chm) unlist(lapply(chm, function(fit) {
hitcall <- fit[["summary"]]$hitcall
bmd <- fit[["summary"]]$bmd
if (!(hitcall>0.8 & !is.na(bmd) & bmd != 0)) {
bmd <- 10000
}
bmd
})))
bmd <- do.call("rbind", bmd)
bmd <- log10(bmd[, ac])
bmd <- bmd[,-c(1,9,14)]
# Identify active chemicals
actives <- rownames(bmd)[apply(bmd, 1, function(row) any(row < 4))]
# Isolate data of interest
to.fit <- bmd
# PBDE-47 name is too long
rownames(bmd)[6] <- "PBDE-47"
actives[6] <- "PBDE-47"
# Create layer matrix -----------------------------------------------------
# Create a matrix specifying if an up, down, up and down, or down and up arrow should be printed in cells.
to.fit <- lapply(tcplfits_n, function(chm) chm[-c(1,9,14)])
layer.mat <- lapply(to.fit, function(chm) unlist(lapply(chm, function(fit) {
hitcall <- fit[["summary"]]$hitcall
fit_method <- fit[["summary"]]$fit_method
dir <- sign(fit[["summary"]]$top)
if (hitcall>0.8 & fit_method=="gnls" & dir==1) {
layer <- 0
} else if (hitcall>0.8 & fit_method=="gnls" & dir==-1) {
layer <- 1
} else if (hitcall>0.8 & dir==1) {
layer <- 2
} else if (hitcall>0.8 & dir==-1) {
layer <- 3
} else layer <- 4
})))
layer.mat <- do.call("rbind", layer.mat)
rownames(layer.mat)[6] <- "PBDE-47" # Change PBDE-47 name to match BMD matrix
layer.mat <- layer.mat[rownames(layer.mat)%in%actives, ]
# Plot heatmap ------------------------------------------------------------
# Column labels
col_labels <- c(expression("Average Speed in Light"^1), "Habituation 1 in Light", "Habituation 2 in Light", expression("Range of Activity in Light"),
"Startle Acceleration", "Startle Relative to Avg. Speed in Light", "Startle Fold-Change",
expression("Average Speed in Dark"^1), "Habituation 1 in Dark", "Habituation 2 in Dark", expression("Range of Activity in Dark"),
"Average Speed in Both Phases", expression("AUC in Dark / AUC in Light Ratio"^2)) # Superscripts notate references in poster
# Legends
# Custom heat legend.
f2 = circlize::colorRamp2(seq(min(bmd), max(bmd), length = 8), rev(viridis(8)), space = "sRGB")
heat_lgd = Legend(col_fun = f2,
title = paste0("BMC log(","\U03BC","M)"),
title_position = "lefttop",
legend_width = unit(4,"cm"),
direction = "horizontal")
# Column annotation by phase legend.
ann_lgd = Legend(labels = c("Light","Transition","Dark","Light+Dark"),
title = "Phase",
title_position = "leftcenter",
labels_gp = gpar(fontsize=12),
title_gp = gpar(fontsize=12),
legend_gp = grid::gpar(fill = c("white","grey","black","red")),
border = TRUE,
nrow = 1,
column_gap = unit(5, 'mm'))
# Legend for cell signal arrows.
dir_lgd = Legend(labels = c(paste("\U2191","Gain"),
paste("\U2193","Loss"),
paste("\U21C5","GainLoss"),
paste("\U21F5","LossGain")),
title = "Signal Direction",
labels_gp = gpar(fontsize=12),
title_gp = gpar(fontsize=12),
title_position = "leftcenter",
nrow = 1,
column_gap = unit(0, 'mm')) # Will produce warnings, don't worry.
lgd_list <- list(ann_lgd, dir_lgd)
# Create column annotation indicating the phase of the LMR that is described.
column_ha <- ComplexHeatmap::HeatmapAnnotation(Phase = factor(c(rep("Light",4), rep("Transition",3),rep("Dark",4),rep("Light+Dark",2)),
levels=c("Light","Transition","Dark","Light+Dark")),
border = TRUE,
col = list(Phase=c("Light"="white",
"Transition"="grey",
"Dark"="black",
"Light+Dark"="red")),
annotation_legend_param = list(nrow = 1),
show_annotation_name = FALSE,
show_legend = FALSE)
# Create function to add arrows indicating signal direction in cells.
cell_fun <- function(j, i, x, y, width, height, fill) {
if (layer.mat[i,j] == 0) {
grid.text("\U21C5", x, y)
} else if (layer.mat[i,j] == 1) {
grid.text("\U21F5", x, y)
} else if (layer.mat[i,j] == 2) {
grid.text("\U2191", x, y)
} else if (layer.mat[i,j] == 3) {
grid.text("\U2193", x, y)
}
}
# Create main heat map.
htlist <- ComplexHeatmap::Heatmap(bmd[rownames(bmd)%in%actives, ],
# Specify some parameters for heat legend.
name = paste0("BMC log(","\U03BC","M)"),
col = f2,
border_gp = grid::gpar(col="black",lwd=1),
rect_gp=grid::gpar(col="grey"),
show_heatmap_legend = TRUE,
heatmap_legend_param = list(legend_height = unit(6,"cm"),
direction = "vertical",
title_gp = grid::gpar(fontsize=14),
labels_gp = grid::gpar(fontsize = 14)),
# Heatmap width and height
# width = unit(16,"in"),
# height = unit(18,"in"),
# Column label parameters
column_labels = col_labels, column_names_rot = 45,
# Split columns by phase.
column_split = factor(c(rep("Light",4), rep("Transition",3),rep("Dark",4),rep("Light+Dark",2)),
levels=c("Light","Transition","Dark","Light+Dark")),
# Specify some column parameters.
column_title = NULL,
top_annotation = column_ha,
# Add signal direction arrows.
cell_fun = cell_fun,
# Specify some parameters row dendrogram aesthetics and row labels.
row_title_side = "right",
row_title_rot = 0,
row_split = 5,
row_dend_side = "right",
row_names_side = "left",
# Clustering parameters.
cluster_columns = FALSE,
cluster_rows = TRUE,
clustering_distance_rows = "pearson",
# Font sizes
row_names_gp = grid::gpar(fontsize=14),
column_names_gp = grid::gpar(fontsize=14),
row_title_gp = grid::gpar(fontsize=14),
column_title_gp = grid::gpar(fontsize=14)
)
# Save heatmap file.
png(filename = "BMC try.png", width = 22, height = 26, unit = "cm", res=300)
draw(htlist, merge_legend = FALSE, annotation_legend_list = lgd_list,
annotation_legend_side = "top", align_annotation_legend = "heatmap_center")
dev.off()
# Font sizes
# row_names_gp = grid::gpar(fontsize=30),
# column_names_gp = grid::gpar(fontsize=0),
# row_title_gp = grid::gpar(fontsize=30),
# column_title_gp = grid::gpar(fontsize=30)
bmd
rownames(bmd)
library(data.table)
library(ComplexHeatmap)
library(gridExtra)
library(viridis)
library(grid)
here::i_am("R/heatmaps.R")
# load data and extract BMC's ---------------------------------------------
# Load tcplfits
library(here)
load("../pipelining/pipelined data/Padilla_DNT60_tcplfits.rda")
ac <- c("AUC_L","avgS_L", "hbt1_L", "hbt2_L","RoA_L",
"strtlA","strtlAavg", "strtlF",
"AUC_D", "avgS_D","hbt1_D", "hbt2_D", "RoA_D",
"AUC_T","avgS_T","AUC_r")
## Gather BMC's
bmd <- lapply(tcplfits_n, function(chm) unlist(lapply(chm, function(fit) {
hitcall <- fit[["summary"]]$hitcall
bmd <- fit[["summary"]]$bmd
if (!(hitcall>0.8 & !is.na(bmd) & bmd != 0)) {
bmd <- 10000
}
bmd
})))
rownames(bmd)
bmd <- do.call("rbind", bmd)
bmd <- log10(bmd[, ac])
bmd <- bmd[,-c(1,9,14)]
bmd
# Identify active chemicals
actives <- rownames(bmd)[apply(bmd, 1, function(row) any(row < 4))]
# Isolate data of interest
to.fit <- bmd
rownames(bmd)
# PBDE-47 name is too long
rownames(bmd)[50] <- "PBDE-47"
actives[50] <- "PBDE-47"
# Create a matrix specifying if an up, down, up and down, or down and up arrow should be printed in cells.
to.fit <- lapply(tcplfits_n, function(chm) chm[-c(1,9,14)])
layer.mat <- lapply(to.fit, function(chm) unlist(lapply(chm, function(fit) {
hitcall <- fit[["summary"]]$hitcall
fit_method <- fit[["summary"]]$fit_method
dir <- sign(fit[["summary"]]$top)
if (hitcall>0.8 & fit_method=="gnls" & dir==1) {
layer <- 0
} else if (hitcall>0.8 & fit_method=="gnls" & dir==-1) {
layer <- 1
} else if (hitcall>0.8 & dir==1) {
layer <- 2
} else if (hitcall>0.8 & dir==-1) {
layer <- 3
} else layer <- 4
})))
layer.mat <- do.call("rbind", layer.mat)
rownames(layer.mat)[6] <- "PBDE-47" # Change PBDE-47 name to match BMD matrix
layer.mat <- layer.mat[rownames(layer.mat)%in%actives, ]
layer.mat
rm(layer.mat)
layer.mat <- lapply(to.fit, function(chm) unlist(lapply(chm, function(fit) {
hitcall <- fit[["summary"]]$hitcall
fit_method <- fit[["summary"]]$fit_method
dir <- sign(fit[["summary"]]$top)
if (hitcall>0.8 & fit_method=="gnls" & dir==1) {
layer <- 0
} else if (hitcall>0.8 & fit_method=="gnls" & dir==-1) {
layer <- 1
} else if (hitcall>0.8 & dir==1) {
layer <- 2
} else if (hitcall>0.8 & dir==-1) {
layer <- 3
} else layer <- 4
})))
layer.mat <- do.call("rbind", layer.mat)
rownames(layer.mat)
rownames(layer.mat)[50] <- "PBDE-47" # Change PBDE-47 name to match BMD matrix
layer.mat <- layer.mat[rownames(layer.mat)%in%actives, ]
# Column labels
col_labels <- c(expression("Average Speed in Light"^1), "Habituation 1 in Light", "Habituation 2 in Light", expression("Range of Activity in Light"),
"Startle Acceleration", "Startle Relative to Avg. Speed in Light", "Startle Fold-Change",
expression("Average Speed in Dark"^1), "Habituation 1 in Dark", "Habituation 2 in Dark", expression("Range of Activity in Dark"),
"Average Speed in Both Phases", expression("AUC in Dark / AUC in Light Ratio"^2)) # Superscripts notate references in poster
# Custom heat legend.
f2 = circlize::colorRamp2(seq(min(bmd), max(bmd), length = 8), rev(viridis(8)), space = "sRGB")
heat_lgd = Legend(col_fun = f2,
title = paste0("BMC log(","\U03BC","M)"),
title_position = "lefttop",
legend_width = unit(4,"cm"),
direction = "horizontal")
# Column annotation by phase legend.
ann_lgd = Legend(labels = c("Light","Transition","Dark","Light+Dark"),
title = "Phase",
title_position = "leftcenter",
labels_gp = gpar(fontsize=12),
title_gp = gpar(fontsize=12),
legend_gp = grid::gpar(fill = c("white","grey","black","red")),
border = TRUE,
nrow = 1,
column_gap = unit(5, 'mm'))
# Legend for cell signal arrows.
dir_lgd = Legend(labels = c(paste("\U2191","Gain"),
paste("\U2193","Loss"),
paste("\U21C5","GainLoss"),
paste("\U21F5","LossGain")),
title = "Signal Direction",
labels_gp = gpar(fontsize=12),
title_gp = gpar(fontsize=12),
title_position = "leftcenter",
nrow = 1,
column_gap = unit(0, 'mm')) # Will produce warnings, don't worry.
lgd_list <- list(ann_lgd, dir_lgd)
# Create column annotation indicating the phase of the LMR that is described.
column_ha <- ComplexHeatmap::HeatmapAnnotation(Phase = factor(c(rep("Light",4), rep("Transition",3),rep("Dark",4),rep("Light+Dark",2)),
levels=c("Light","Transition","Dark","Light+Dark")),
border = TRUE,
col = list(Phase=c("Light"="white",
"Transition"="grey",
"Dark"="black",
"Light+Dark"="red")),
annotation_legend_param = list(nrow = 1),
show_annotation_name = FALSE,
show_legend = FALSE)
# Create function to add arrows indicating signal direction in cells.
cell_fun <- function(j, i, x, y, width, height, fill) {
if (layer.mat[i,j] == 0) {
grid.text("\U21C5", x, y)
} else if (layer.mat[i,j] == 1) {
grid.text("\U21F5", x, y)
} else if (layer.mat[i,j] == 2) {
grid.text("\U2191", x, y)
} else if (layer.mat[i,j] == 3) {
grid.text("\U2193", x, y)
}
}
# Create main heat map.
htlist <- ComplexHeatmap::Heatmap(bmd[rownames(bmd)%in%actives, ],
# Specify some parameters for heat legend.
name = paste0("BMC log(","\U03BC","M)"),
col = f2,
border_gp = grid::gpar(col="black",lwd=1),
rect_gp=grid::gpar(col="grey"),
show_heatmap_legend = TRUE,
heatmap_legend_param = list(legend_height = unit(6,"cm"),
direction = "vertical",
title_gp = grid::gpar(fontsize=14),
labels_gp = grid::gpar(fontsize = 14)),
# Heatmap width and height
# width = unit(16,"in"),
# height = unit(18,"in"),
# Column label parameters
column_labels = col_labels, column_names_rot = 45,
# Split columns by phase.
column_split = factor(c(rep("Light",4), rep("Transition",3),rep("Dark",4),rep("Light+Dark",2)),
levels=c("Light","Transition","Dark","Light+Dark")),
# Specify some column parameters.
column_title = NULL,
top_annotation = column_ha,
# Add signal direction arrows.
cell_fun = cell_fun,
# Specify some parameters row dendrogram aesthetics and row labels.
row_title_side = "right",
row_title_rot = 0,
row_split = 5,
row_dend_side = "right",
row_names_side = "left",
# Clustering parameters.
cluster_columns = FALSE,
cluster_rows = TRUE,
clustering_distance_rows = "pearson",
# Font sizes
row_names_gp = grid::gpar(fontsize=14),
column_names_gp = grid::gpar(fontsize=14),
row_title_gp = grid::gpar(fontsize=14),
column_title_gp = grid::gpar(fontsize=14)
)
# Save heatmap file.
png(filename = "BMC try.png", width = 22, height = 26, unit = "cm", res=300)
draw(htlist, merge_legend = FALSE, annotation_legend_list = lgd_list,
annotation_legend_side = "top", align_annotation_legend = "heatmap_center")
dev.off()
